generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  username             String    @unique
  password             String
  email                String?   @unique
  emailToken           String?
  emailTokenExpiration DateTime?
  emailVerified        Boolean   @default(false)
  comments             Comment[]
  posts                Post[]
  likes                Like[]
  profile              String?
  createdAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  updatedAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0) @updatedAt
  deletedAt DateTime? 
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  images    Image[]
  region    String
  latitude  Float?
  longitude Float?
  date1     DateTime? 
  date2     DateTime? 
  tags1     String?
  tags2     String?
  userId    Int
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postStatus String?  @default("public")
  likes     Like[]
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  updatedAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0) @updatedAt
  deletedAt DateTime? 
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  updatedAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0) @updatedAt
  deletedAt DateTime? 
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  userId  Int
  postId  Int?
  post    Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  updatedAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0) @updatedAt
  deletedAt DateTime? 
}

model Like {
  id     Int    @id @default(autoincrement())
  userId Int
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  @@unique([userId, postId])
}
